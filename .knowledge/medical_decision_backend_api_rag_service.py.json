{"is_source_file": true, "format": "Python", "description": "This is a Python source file implementing a Retrieval-Augmented Generation (RAG) index system for medical documents, including document loading, embedding, searching, and recommendation composing functionalities.", "external_files": ["os", "json", "importlib.util"], "external_methods": ["importlib.util.find_spec"], "published": ["compose_recommendation"], "classes": [{"name": "SimpleEmbedder", "description": "A minimal stub embedder for generating vector representations of text data, primarily for scaffold purposes."}, {"name": "RAGIndex", "description": "A class that maintains a document index with optional FAISS or Chroma support for similarity search, loads documents from a specified directory, and provides querying functionality."}], "methods": [{"name": "encode(self, text: str)", "description": "Encodes input text into a vector using a simple hashing-based method.", "scope": "SimpleEmbedder", "scopeKind": "class"}, {"name": "List[Dict] query(self, question: str, top_k: int = 4)", "description": "Performs a similarity search over loaded documents given a question, returning top_k relevant documents with scores.", "scope": "RAGIndex", "scopeKind": "class"}, {"name": "_load_documents(self)", "description": "Loads documents from the filesystem, supporting .txt and .jsonl files.", "scope": "RAGIndex", "scopeKind": "class"}, {"name": "_add_doc(self, doc: Dict)", "description": "Adds a document to the index and computes its vector.", "scope": "RAGIndex", "scopeKind": "class"}, {"name": "float _score(self, vq, vd)", "description": "Calculates cosine similarity between two vectors.", "scope": "RAGIndex", "scopeKind": "class"}, {"name": "__init__(self, base_dir: str)", "scope": "RAGIndex", "scopeKind": "class", "description": "unavailable"}, {"name": "Tuple[str,List[Dict]] compose_recommendation(question: str, hits: List[Dict])", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["os.getenv", "os.listdir", "os.path.join", "os.path.isdir", "open", "json.loads", "math.sqrt"], "search-terms": ["medical_docs", "RAG index", "session-based document retrieval", "embedding", "cosine similarity", "compose_recommendation"], "state": 2, "file_id": 21, "knowledge_revision": 76, "git_revision": "39319779b7594b2616f7df6e074ed58ab91f8955", "revision_history": [{"43": ""}, {"76": "39319779b7594b2616f7df6e074ed58ab91f8955"}], "ctags": [{"_type": "tag", "name": "CHROMA_AVAILABLE", "path": "/home/kavia/workspace/code-generation/medical-decision-support-system-2889-2898/medical_decision_backend/api/rag_service.py", "pattern": "/^CHROMA_AVAILABLE = importlib.util.find_spec(\"chromadb\") is not None$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "FAISS_AVAILABLE", "path": "/home/kavia/workspace/code-generation/medical-decision-support-system-2889-2898/medical_decision_backend/api/rag_service.py", "pattern": "/^FAISS_AVAILABLE = importlib.util.find_spec(\"faiss\") is not None or importlib.util.find_spec(\"fai/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "RAGIndex", "path": "/home/kavia/workspace/code-generation/medical-decision-support-system-2889-2898/medical_decision_backend/api/rag_service.py", "pattern": "/^class RAGIndex:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "SimpleEmbedder", "path": "/home/kavia/workspace/code-generation/medical-decision-support-system-2889-2898/medical_decision_backend/api/rag_service.py", "pattern": "/^class SimpleEmbedder:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/medical-decision-support-system-2889-2898/medical_decision_backend/api/rag_service.py", "pattern": "/^    def __init__(self, base_dir: str):$/", "language": "Python", "kind": "member", "signature": "(self, base_dir: str)", "scope": "RAGIndex", "scopeKind": "class"}, {"_type": "tag", "name": "_add_doc", "path": "/home/kavia/workspace/code-generation/medical-decision-support-system-2889-2898/medical_decision_backend/api/rag_service.py", "pattern": "/^    def _add_doc(self, doc: Dict):$/", "language": "Python", "kind": "member", "signature": "(self, doc: Dict)", "scope": "RAGIndex", "scopeKind": "class"}, {"_type": "tag", "name": "_load_documents", "path": "/home/kavia/workspace/code-generation/medical-decision-support-system-2889-2898/medical_decision_backend/api/rag_service.py", "pattern": "/^    def _load_documents(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "RAGIndex", "scopeKind": "class"}, {"_type": "tag", "name": "_score", "path": "/home/kavia/workspace/code-generation/medical-decision-support-system-2889-2898/medical_decision_backend/api/rag_service.py", "pattern": "/^    def _score(self, vq, vd) -> float:$/", "language": "Python", "typeref": "typename:float", "kind": "member", "signature": "(self, vq, vd)", "scope": "RAGIndex", "scopeKind": "class"}, {"_type": "tag", "name": "compose_recommendation", "path": "/home/kavia/workspace/code-generation/medical-decision-support-system-2889-2898/medical_decision_backend/api/rag_service.py", "pattern": "/^def compose_recommendation(question: str, hits: List[Dict]) -> Tuple[str, List[Dict]]:$/", "language": "Python", "typeref": "typename:Tuple[str,List[Dict]]", "kind": "function", "signature": "(question: str, hits: List[Dict])"}, {"_type": "tag", "name": "dim", "path": "/home/kavia/workspace/code-generation/medical-decision-support-system-2889-2898/medical_decision_backend/api/rag_service.py", "pattern": "/^    dim = 128$/", "language": "Python", "kind": "variable", "scope": "SimpleEmbedder", "scopeKind": "class"}, {"_type": "tag", "name": "encode", "path": "/home/kavia/workspace/code-generation/medical-decision-support-system-2889-2898/medical_decision_backend/api/rag_service.py", "pattern": "/^    def encode(self, text: str):$/", "language": "Python", "kind": "member", "signature": "(self, text: str)", "scope": "SimpleEmbedder", "scopeKind": "class"}, {"_type": "tag", "name": "query", "path": "/home/kavia/workspace/code-generation/medical-decision-support-system-2889-2898/medical_decision_backend/api/rag_service.py", "pattern": "/^    def query(self, question: str, top_k: int = 4) -> List[Dict]:$/", "language": "Python", "typeref": "typename:List[Dict]", "kind": "member", "signature": "(self, question: str, top_k: int = 4)", "scope": "RAGIndex", "scopeKind": "class"}], "hash": "cfaf95b1f0a47744fd1295274de73e34", "format-version": 4, "code-base-name": "medical_decision_backend", "filename": "medical_decision_backend/api/rag_service.py", "fields": [{"name": "CHROMA_AVAILABLE = importlib.util.find_spec(\"chromadb\") is not None", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "FAISS_AVAILABLE = importlib.util.find_spec(\"faiss\") is not None or importlib.util.find_spec(\"fai/", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "dim = 128", "scope": "SimpleEmbedder", "scopeKind": "class", "description": "unavailable"}]}